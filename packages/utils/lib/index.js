!(function (e, t) { typeof exports === 'object' && typeof module === 'object' ? module.exports = t() : typeof define === 'function' && define.amd ? define([], t) : typeof exports === 'object' ? exports.utils = t() : e.utils = t() }(self, function () { return (() => { 'use strict'; var e = { d: (t, n) => { for (const o in n)e.o(n, o) && !e.o(t, o) && Object.defineProperty(t, o, { enumerable: !0, get: n[o] }) }, o: (e, t) => Object.prototype.hasOwnProperty.call(e, t), r: e => { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(e, '__esModule', { value: !0 }) } }; const t = {}; e.r(t), e.d(t, { UtilsFile: () => i }); const n = {}; function o (e) { const t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 'boolean'; const n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 'img'; const o = { img: new RegExp(/\.(jpeg|png|jpg)$/, 'i'), video: new RegExp(/\.(rm|rmvb|mpeg-1|mpeg-2|mpeg-3|mpeg-4|mov|mtv|dat|wmv|avi|3gp|amv|dmv|flv|mpg|mpe|mpa|m15|m1v|mp2|mp4)$/, 'i'), audio: new RegExp(/\.(CD|mp3|MIDI|AAC|FLAC|APE|AMR|AIFF|WAVE)$/, 'i'), word: new RegExp(/\.(doc|docx)$/, 'i'), excel: new RegExp(/\.(xls|xlsx)$/, 'i'), ppt: new RegExp(/\.(ppt|pptx)$/, 'i'), pdf: new RegExp(/\.(pdf)$/, 'i'), gif: new RegExp(/\.(gif)$/, 'i') }; return t === 'boolean' ? Object.keys(o).indexOf(n) > -1 ? o[n].test(e) : 'unknown' : Object.keys(o).find(function (t) { return o[t].test(e) }) || 'unknown' } function p (e) { return e.substring(e.lastIndexOf('.') + 1) }e.r(n), e.d(n, { checkFileType: () => o, getFileSuffix: () => p }); var i = n; return t })() }))
// # sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELElBQ1EsbUJBQVhHLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxHQUFJSCxHQUNlLGlCQUFaQyxRQUNkQSxRQUFlLE1BQUlELElBRW5CRCxFQUFZLE1BQUlDLElBUmxCLENBU0dLLE1BQU0sV0FDVCxNLG1CQ1RBLElBQUlDLEVBQXNCLENDQTFCLEVBQXdCLENBQUNMLEVBQVNNLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWEQsRUFBb0JHLEVBQUVGLEVBQVlDLEtBQVNGLEVBQW9CRyxFQUFFUixFQUFTTyxJQUM1RUUsT0FBT0MsZUFBZVYsRUFBU08sRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLE1DSjNFLEVBQXdCLENBQUNNLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEdDQ2xGLEVBQXlCZCxJQUNILG9CQUFYa0IsUUFBMEJBLE9BQU9DLGFBQzFDVixPQUFPQyxlQUFlVixFQUFTa0IsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEWCxPQUFPQyxlQUFlVixFQUFTLGFBQWMsQ0FBRW9CLE9BQU8sTSw4Q0NBaEQsU0FBU0MsRUFBY0MsR0FDNUIsSUFBSUMsRUFBYUMsVUFBVUMsT0FBUyxRQUFzQkMsSUFBakJGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxVQUNqRkcsRUFBV0gsVUFBVUMsT0FBUyxRQUFzQkMsSUFBakJGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxNQUMvRUksRUFBZSxDQUNqQkMsSUFBSyxJQUFJQyxPQUFPLG9CQUFxQixLQUNyQ0MsTUFBTyxJQUFJRCxPQUFPLDJHQUE0RyxLQUM5SEUsTUFBTyxJQUFJRixPQUFPLDhDQUErQyxLQUNqRUcsS0FBTSxJQUFJSCxPQUFPLGdCQUFpQixLQUNsQ0ksTUFBTyxJQUFJSixPQUFPLGdCQUFpQixLQUNuQ0ssSUFBSyxJQUFJTCxPQUFPLGdCQUFpQixLQUNqQ00sSUFBSyxJQUFJTixPQUFPLFdBQVksS0FDNUJPLElBQUssSUFBSVAsT0FBTyxXQUFZLE1BRzlCLE1BQW1CLFlBQWZQLEVBQ0VkLE9BQU82QixLQUFLVixHQUFjVyxRQUFRWixJQUFhLEVBQzFDQyxFQUFhRCxHQUFVYSxLQUFLbEIsR0FHOUIsVUFHRmIsT0FBTzZCLEtBQUtWLEdBQWNhLE1BQUssU0FBVUMsR0FDOUMsT0FBT2QsRUFBYWMsR0FBR0YsS0FBS2xCLE9BQ3hCLFVBT0QsU0FBU3FCLEVBQWNyQixHQUM1QixPQUFPQSxFQUFJc0IsVUFBVXRCLEVBQUl1QixZQUFZLEtBQU8sRyx3RENwQ3ZDLElBQUlDLEVBQVksRSIsInNvdXJjZXMiOlsid2VicGFjazovL3V0aWxzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly91dGlscy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly91dGlscy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdXRpbHMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly91dGlscy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3V0aWxzLy4vc3JjL2ZpbGUudHMiLCJ3ZWJwYWNrOi8vdXRpbHMvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1widXRpbHNcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1widXRpbHNcIl0gPSBmYWN0b3J5KCk7XG59KShzZWxmLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8qKlxuICogQGRlc2Mg5qCh6aqM5paH5Lu25qC85byPXG4gKiBAcGFyYW0gc3RyXG4gKiBAcGFyYW0gdHlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tGaWxlVHlwZShzdHIpIHtcbiAgdmFyIHJldHVyblR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdib29sZWFuJztcbiAgdmFyIGZpbGVUeXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnaW1nJztcbiAgdmFyIHR5cGVUb1JlZ0V4cCA9IHtcbiAgICBpbWc6IG5ldyBSZWdFeHAoL1xcLihqcGVnfHBuZ3xqcGcpJC8sICdpJyksXG4gICAgdmlkZW86IG5ldyBSZWdFeHAoL1xcLihybXxybXZifG1wZWctMXxtcGVnLTJ8bXBlZy0zfG1wZWctNHxtb3Z8bXR2fGRhdHx3bXZ8YXZpfDNncHxhbXZ8ZG12fGZsdnxtcGd8bXBlfG1wYXxtMTV8bTF2fG1wMnxtcDQpJC8sICdpJyksXG4gICAgYXVkaW86IG5ldyBSZWdFeHAoL1xcLihDRHxtcDN8TUlESXxBQUN8RkxBQ3xBUEV8QU1SfEFJRkZ8V0FWRSkkLywgJ2knKSxcbiAgICB3b3JkOiBuZXcgUmVnRXhwKC9cXC4oZG9jfGRvY3gpJC8sICdpJyksXG4gICAgZXhjZWw6IG5ldyBSZWdFeHAoL1xcLih4bHN8eGxzeCkkLywgJ2knKSxcbiAgICBwcHQ6IG5ldyBSZWdFeHAoL1xcLihwcHR8cHB0eCkkLywgJ2knKSxcbiAgICBwZGY6IG5ldyBSZWdFeHAoL1xcLihwZGYpJC8sICdpJyksXG4gICAgZ2lmOiBuZXcgUmVnRXhwKC9cXC4oZ2lmKSQvLCAnaScpXG4gIH07XG5cbiAgaWYgKHJldHVyblR5cGUgPT09ICdib29sZWFuJykge1xuICAgIGlmIChPYmplY3Qua2V5cyh0eXBlVG9SZWdFeHApLmluZGV4T2YoZmlsZVR5cGUpID4gLTEpIHtcbiAgICAgIHJldHVybiB0eXBlVG9SZWdFeHBbZmlsZVR5cGVdLnRlc3Qoc3RyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJ3Vua25vd24nO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKHR5cGVUb1JlZ0V4cCkuZmluZChmdW5jdGlvbiAodikge1xuICAgIHJldHVybiB0eXBlVG9SZWdFeHBbdl0udGVzdChzdHIpO1xuICB9KSB8fCAndW5rbm93bic7XG59XG4vKipcbiAqIEBkZXNjIOiOt+WPluaWh+S7tuWQjue8gOWQjVxuICogQHBhcmFtIHN0clxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWxlU3VmZml4KHN0cikge1xuICByZXR1cm4gc3RyLnN1YnN0cmluZyhzdHIubGFzdEluZGV4T2YoJy4nKSArIDEpO1xufSIsImltcG9ydCAqIGFzIGZpbGUgZnJvbSAnLi9maWxlJztcbmV4cG9ydCB2YXIgVXRpbHNGaWxlID0gZmlsZTsiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsIl9fd2VicGFja19yZXF1aXJlX18iLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwiY2hlY2tGaWxlVHlwZSIsInN0ciIsInJldHVyblR5cGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJmaWxlVHlwZSIsInR5cGVUb1JlZ0V4cCIsImltZyIsIlJlZ0V4cCIsInZpZGVvIiwiYXVkaW8iLCJ3b3JkIiwiZXhjZWwiLCJwcHQiLCJwZGYiLCJnaWYiLCJrZXlzIiwiaW5kZXhPZiIsInRlc3QiLCJmaW5kIiwidiIsImdldEZpbGVTdWZmaXgiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsIlV0aWxzRmlsZSJdLCJzb3VyY2VSb290IjoiIn0=
